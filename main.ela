import rayui::*;
import fmt::{
  printlnf,
  println,
  format,
};
import math::RAND_MAX;

const N_CELLS_X := 16;
const N_CELLS_Y := 12;

Sprite :: struct {
  texture: Texture2D,
  source: Rectangle,
  origin: Vector2,
}

impl Sprite {
  new :: fn(path: str) -> #self {
    texture := LoadTexture(path.data);
    source := Rectangle.{
      x: 0,
      y: 0,
      width: texture.width,
      height: texture.height,
    };

    return .{
      texture: texture,
      source: source,
    };
  }

  draw :: fn(self, destination: Rectangle, rotation: f32, tint: Color) {
    DrawTexturePro(self.texture, self.source, destination, self.origin, rotation, tint);
  }
}

Enemy :: struct;
Tower :: struct {
  sprite: *mut Sprite,
  target: *mut Enemy,

  position: Vector2,
  active: bool,

  id: u64,
  targeting_radius: u32,
  hit_timer: Timer,

  health: f32,
  damage: f32,

  rotation: f32,
}

Enemy :: struct {
  point_index: s32,
  position: Vector2,
  sprite: *mut Sprite,
  id: u64,
  speed: f32,
  targeting_radius: u32,
  target: *mut Tower,
  hit_timer: Timer,

  health: f32,
  damage: f32,
}

Context :: struct {
  screen_size: Vector2,
  path: List!<Vector2>,
  cell_size: Vector2,

  towers: List!<Tower>,
  enemies: List!<Enemy>,

  background_sprite: Sprite,
  enemy_sprite: Sprite,
  tower_sprite: Sprite,
}

impl Context {
  new :: fn() -> #self {
    mut self: #self = .{
      screen_size: .{
        x: GetScreenWidth(),
        y: GetScreenHeight(),
      },

      // Path points in 0 -> 1 space.
      path: List!<Vector2>::init(.[
        .{x: 0.0,             y: 17.0 / 128.0}, // begin
        .{x: 92.0  / 128.0,   y: 17.0 / 128.0},
        .{x: 92.0  / 128.0,   y: 48.0 / 128.0},
        .{x: 21.0  / 128.0,   y: 48.0 / 128.0},
        .{x: 21.0  / 128.0,   y: 92.0 / 128.0},
        .{x: 45.0  / 128.0,   y: 92.0 / 128.0},
        .{x: 45.0  / 128.0,   y: 71.0 / 128.0},
        .{x: 127.0 / 128.0,   y: 71.0 / 128.0}, // end
      ]),
    };

    self.cell_size = .{
      x: self.screen_size.x / N_CELLS_X,
      y: self.screen_size.y / N_CELLS_Y
    };

    self.towers.initialize(N_CELLS_X * N_CELLS_Y);

    mut x, mut y := (0, 0);
    for cell in self.towers.iter_mut() {
      cell.active = false;
      cell.position = .{x: x * self.cell_size.x, y: y * self.cell_size.y};
      x += 1;
      if x >= N_CELLS_X {
        y += 1;
        x = 0;
      }
    }

    println(self.towers.length);


    self.background_sprite = Sprite::new("assets/map.png");
    self.enemy_sprite = Sprite::new("assets/enemy.png");
    self.tower_sprite = Sprite::new("assets/bow.png");
    return self;
  }
}

impl Tower {
  enable :: fn(*mut self, ctx: *mut Context) {
    #static id: u64 = 0;
    self.sprite = &mut ctx.tower_sprite;
    self.sprite.origin = .{
      x: self.sprite.texture.width,
      y: self.sprite.texture.height,
    };
    self.id = id++;
    self.target = null;
    self.targeting_radius = 96;
    self.hit_timer.interval = 0.5;
    self.damage = 0.5;
    self.health = 10;
    self.active = true;
  }

  get_logical :: fn(self, ctx: *mut Context) -> (Vector2, Rectangle) {
    lp := Vector2.{
      x: self.position.x + ctx.cell_size.x / 2,
      y: self.position.y + ctx.cell_size.y / 2,
    };
    return (
      lp,
      Rectangle.{
        x: lp.x,
        y: lp.y,
        width: ctx.cell_size.x,
        height: ctx.cell_size.y,
      }
    );
  }

  get_visual_rect :: fn(self, ctx: *mut Context) -> Rectangle {
    return.{
      x: self.position.x,
      y: self.position.y,
      width: ctx.cell_size.x,
      height: ctx.cell_size.y,
    };
  }
}

impl Enemy {
  new :: fn(ctx: *mut Context) -> #self {
    #static id := 0 as u64;
    mut self: #self = .{
      position: ctx.path[0],
      sprite: &mut ctx.enemy_sprite
      targeting_radius: 52,
      hit_timer: .{
        interval: 1,
      },
      damage: 0.5,
      health: 3,
      id: id++,
      speed: 5.0,
    };

    //// TODO: we shouldn't have to do this.
    self.sprite.origin = .{
      x: self.sprite.texture.width,
      y: self.sprite.texture.height
    };

    return self;
  }
}

init :: fn() {
  SetTraceLogLevel(TraceLogLevel::LOG_NONE);
  InitWindow(800, 600, "Hello, Raylib!"c);
  SetTargetFPS(60);
}

point_obstructs_path :: fn(ctx: *mut Context, tower: *mut Tower) -> bool {
  mut last_node := ctx.path[0];
  mut first := true;
  for node in ctx.path {
    if first {
      first = false;
      continue;
    }

    start_cell := Vector2.{
      x: (last_node.x * ctx.screen_size.x / ctx.cell_size.x) as s32,
      y: (last_node.y * ctx.screen_size.y / ctx.cell_size.y) as s32,
    };
    end_cell := Vector2.{
      x: (node.x * ctx.screen_size.x / ctx.cell_size.x) as s32,
      y: (node.y * ctx.screen_size.y / ctx.cell_size.y) as s32,
    };

    // Bresenham's line algorithm to traverse grid cells
    mut dx := abs(end_cell.x - start_cell.x);
    mut dy := abs(end_cell.y - start_cell.y);
    mut sx: s32;
    if start_cell.x < end_cell.x {
      sx = 1;
    } else {
      sx = -1;
    }

    mut sy: s32;
    if start_cell.y < end_cell.y {
      sy = 1;
    } else {
      sy = -1;
    }
    mut err := dx - dy;

    mut current_cell := start_cell;
    while current_cell.x != end_cell.x || current_cell.y != end_cell.y {
      if current_cell.x == (tower.position.x / ctx.cell_size.x) as s32 &&
         current_cell.y == (tower.position.y / ctx.cell_size.y) as s32 {
        return true;
      }

      e2 := 2 * err;
      if e2 > -dy {
        err -= dy;
        current_cell.x += sx;
      }
      if e2 < dx {
        err += dx;
        current_cell.y += sy;
      }
    }

    if end_cell.x == (tower.position.x / ctx.cell_size.x) as s32 &&
       end_cell.y == (tower.position.y / ctx.cell_size.y) as s32 {
      return true;
    }

    last_node = node;
  }

  return false; // No collision with any path segment
}

run :: fn(ctx: *mut Context) {

  // Adjust path points to ensure they travel through the center of each cell.
  // The path is hand written and likely off kilter.

  // ! this is wrong though. it's always off-by-one pixel,
  // ! so a cell above and below or left and right of you just will never get hit.
  for point in ctx.path.iter_mut() {
    cell_x := (point.x * ctx.screen_size.x / ctx.cell_size.x) as s32;
    cell_y := (point.y * ctx.screen_size.y / ctx.cell_size.y) as s32;
    point.x = (cell_x as f32 + 0.5) * ctx.cell_size.x / ctx.screen_size.x;
    point.y = (cell_y as f32 + 0.5) * ctx.cell_size.y / ctx.screen_size.y;
  }

  mut timer: rayui::Timer;
  timer.interval = 1;

  mut paused := false;
  while !WindowShouldClose() {

    BeginDrawing();
    defer EndDrawing();

    if (IsKeyPressed(KeyboardKey::KEY_ENTER)) {
      paused = !paused;
    }

    if paused {
      continue;
    }


    if timer.tick() && ctx.enemies.length < 10 {
      ctx.enemies.push(Enemy::new(ctx));
    }

      // draw the background.
      ctx.background_sprite.draw(.{
        x: 0, y: 0,
        width: ctx.screen_size.x,
        height: ctx.screen_size.y,
      }, 0, WHITE);

      mut last_point : Vector2 = .{
        x: ctx.path[0].x * ctx.screen_size.x,
        y: ctx.path[0].y * ctx.screen_size.y
      };

      for point in ctx.path {
        point = .{
          x: point.x * ctx.screen_size.x,
          y: point.y * ctx.screen_size.y
        };

        DrawLine(
          point.x as s32,
          point.y as s32,
          last_point.x as s32,
          last_point.y as s32,
          ColorAlpha(PURPLE, 0.55)
        );

        last_point = point;
      }

      // move the enemies, draw their sprites.
      mut dead_enemies: List!<*mut Enemy>;
      for enemy in ctx.enemies.iter_mut() {
        rectangle : Rectangle = .{
          x: enemy.position.x,
          y: enemy.position.y,
          width: 32,
          height: 32,
        };

        enemy.sprite.draw(rectangle, 0.0, WHITE);
        DrawCircleV(enemy.position, enemy.targeting_radius, ColorAlpha(YELLOW, 0.5));

        { // targeting
          mut closest_tower: *mut Tower;

          for tower in ctx.towers.iter_mut() {
            logical_position, logical_rect := tower.get_logical(ctx);
            if tower.active {
              if CheckCollisionPointCircle(logical_position, enemy.position, enemy.targeting_radius) {
                if !closest_tower {
                  closest_tower = tower;
                } else {
                  closest_logical_position, _ := closest_tower.get_logical(ctx);
                  distance := Vector2Distance(enemy.position, closest_logical_position);
                  current :=  Vector2Distance(enemy.position, logical_position);
                  if distance > current {
                    closest_tower = tower;
                  }
                }
              }

            }
          }

          if closest_tower && enemy.hit_timer.tick() {
            closest_tower.health -= enemy.damage;
            printlnf("hit tower: %, remaining hp: %", (closest_tower.id, closest_tower.health));
            if closest_tower.health <= 0.0 {
              closest_tower.active = false;
            }
          }
        }

        { // Pathing

          normalized_target := ctx.path[enemy.point_index];
          target : Vector2 = .{
            x: normalized_target.x * ctx.screen_size.x,
            y: normalized_target.y * ctx.screen_size.y,
          };

          speed := enemy.speed;
          distance := Vector2Distance(enemy.position, target);
          if distance > speed {
            direction := Vector2Normalize(Vector2Subtract(target, enemy.position));
            enemy.position = Vector2Add(enemy.position, Vector2Scale(direction, speed));
          } else {
            if enemy.point_index >= ctx.path.length - 1 {
              dead_enemies.push(enemy);
            }
            enemy.point_index++;
          }

        }
      }

      for enemy in dead_enemies {
        ctx.enemies.remove(*enemy, fn(other: Enemy, seek: Enemy) -> bool {
          return other.id == seek.id;
        });
      }

      // Draw the tower grid as cell lines.
      for tower in ctx.towers.iter_mut() {
        logical_position, logical_rect := tower.get_logical(ctx);
        tower_rect := tower.get_visual_rect(ctx);

        // Place tower.
        cursor_point := GetMousePosition();
        mut color := ColorAlpha(BLUE, 0.175);
        if (CheckCollisionPointRec(cursor_point, tower_rect)) {
          color = WHITE;
          const MB_L := MouseButton::MOUSE_BUTTON_LEFT;

          if !tower.active && IsMouseButtonPressed(MB_L) && !point_obstructs_path(ctx, tower) {
            tower.enable(ctx);
          }
        }

        // Draw grid
        DrawRectangleLinesEx(tower_rect, 1.0, color);

        if !tower.active
          then continue;

        DrawCircleV(logical_position, 5, RED);

        if tower.target {
          angle := Vector2Subtract(tower.target.position, logical_position);
          angle_radians := atan2(-angle.y, -angle.x);
          tower.rotation = angle_radians * (180.0 / PI);
          DrawCircleV(tower.target.position, 16, WHITE);
        }

        tower.sprite.draw(.{
          x: logical_position.x,
          y: logical_position.y,
          width: tower_rect.width,
          height: tower_rect.height,
        }, tower.rotation, WHITE);
        
        DrawCircleV(logical_position, tower.targeting_radius, ColorAlpha(RED, 0.25));

        // Targeting enemies and dealing damage.
        mut closest_enemy: *mut Enemy;

        for enemy in ctx.enemies.iter_mut() {
          if CheckCollisionPointCircle(enemy.position, logical_position, tower.targeting_radius) {
            if !closest_enemy {
              closest_enemy = enemy;
            } else {
              distance := fabs(Vector2Distance(logical_position, closest_enemy.position));
              current  :=  fabs(Vector2Distance(logical_position, enemy.position));
              if distance > current {
                closest_enemy = enemy;
              }
            }
          }
        }

        if closest_enemy {
          if tower.hit_timer.tick() {
            closest_enemy.health -= tower.damage;
            tower.target = closest_enemy;
            if closest_enemy.health <= 0.0 {
              ctx.enemies.remove(*closest_enemy, fn(other: Enemy, seek: Enemy) -> bool {
                return other.id == seek.id;
              });
              tower.target = null;
            }
          }
        } else {
          tower.target = null;
        }

      }

  }
}

main :: fn() {
  init();
  mut ctx := Context::new();
  run(&mut ctx);
}
